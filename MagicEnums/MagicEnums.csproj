<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<VersionPrefix>0.9.6</VersionPrefix>
		<PackageReleaseNotes>Added source generation as package</PackageReleaseNotes>
		<TargetFramework>netstandard2.1</TargetFramework>
		<LangVersion>10</LangVersion>
	</PropertyGroup>
	
	<PropertyGroup>
		<Title>CodeChops.MagicEnums</Title>
		<AssemblyName>CodeChops.MagicEnums</AssemblyName>
		<RootNamespace>CodeChops.MagicEnums</RootNamespace>
		<PackageId>CodeChops.MagicEnums</PackageId>
		<Authors>CodeChops (@Code-Chops), Max Bergman</Authors>
		<Company>CodeChops</Company>
		<PackageProjectUrl>https://github.com/code-chops/MagicEnums</PackageProjectUrl>
		<PackageTags>CodeChops;CodeChops.MagicEnums;CodeChops.MagicEnum;MagicEnums;MagicEnum;Magic enums;Magic enum;Smart enums;Smart enum;Better enums;Better enum;</PackageTags>
		<RepositoryUrl>https://github.com/code-chops/MagicEnums</RepositoryUrl>
		<RepositoryType>Git</RepositoryType>
		<PublishRepositoryUrl>true</PublishRepositoryUrl>
		<PackageIcon>icon.png</PackageIcon>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<Copyright>Copyright (c) CodeChops 2022</Copyright>
		<Description>
Flexible and extendable enums for C#:
* It is possible to use other member values than integral types. For example: 
	- Strings that automatically represent their member name:
		* This prohibits incorrect usage of integral values when they are not needed;
		* It removes the need to keep track of (incremental) integral values;
	- Custom defined types, for example see StrictDirection: https://github.com/Code-Chops/Geometry/;

* Optional clean definition by using attributes (source generated):
	- Use the MagicEnum-attribute (and set IsInternal to true if needed);
	- Use the Member-attribute to create a member and optionally provide their value;

* Inheritance and/or partial records can be used to extend your enums: 
	- Enums can now be extended in multiple projects;
	- Custom methods can be added to enums, if necessary;

* Enum-members can be auto-discovered. This removes the need to keep track of used/unused enum-members:
	- Explicitly:
		* Is enabled by adding the DiscoverableEnumMembers-attribute;
		* Use {Enum}.{Member}.GenerateMember(...) to create a source generated enum-member on the fly;
		* A member value (and comment) can be provided;
	- Implicitly:
		* Is enabled by adding the DiscoverableEnumMembers-attribute with implicitDiscoverability = true;
		* Use {Enum}.{Member} to create a source generated enum-member on the fly;
			
* Enum members can be added at runtime, if necessary;

* The accessibility of the enum can be set to internal;

* Has the same functionality as the default .NET enum:
	- Members can be found by using their name or value;
	- Multiple members with the same value can even be looked up: This is not supported in default C# enums;

* Optimized, and therefore fast member registration / lookup;
		</Description>
		<AnalysisLevel>latest</AnalysisLevel>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
	</PropertyGroup>

	<ItemGroup>
		<None Include="$(OutputPath)\$(AssemblyName).SourceGeneration.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
		<ProjectReference Include="..\MagicEnums.SourceGeneration\MagicEnums.SourceGeneration.csproj" OutputItemType="Analyzer" />
	</ItemGroup>

	<ItemGroup>
		<None Include="Properties\LICENSE" Pack="true" PackagePath="" />
		<None Include="Properties\icon.png" Pack="true" Visible="true" PackagePath="" />
	</ItemGroup>
	
	<ItemGroup>
		<InternalsVisibleTo Include="$(AssemblyName).UnitTests" />
	</ItemGroup>

	<PropertyGroup>
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="CodeChops.GenericMath" Version="1.2.7" />
	</ItemGroup>

	<PropertyGroup>
		<!-- CA1822: Instance member does not access instance data and can be marked as static -->
		<!-- CS1573: Undocumented public symbol while -doc compiler option is used -->
		<!-- CS1591: Missing XML comment for publicly visible type -->
		<!-- CA1816: Dispose() should call GC.SuppressFinalize()-->
		<NoWarn>CA1822,CS1573,CS1591,CA1816</NoWarn>
		<DebugType>none</DebugType>
	</PropertyGroup>
</Project>