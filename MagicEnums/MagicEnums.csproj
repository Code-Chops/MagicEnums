<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<AssemblyName>CodeChops.MagicEnums</AssemblyName>
		<RootNamespace>CodeChops.MagicEnums</RootNamespace>
		<TargetFramework>net6.0</TargetFramework>
		<LangVersion>10</LangVersion>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<EnablePreviewFeatures>true</EnablePreviewFeatures>
	</PropertyGroup>
	
	<PropertyGroup>
		<Version>2.4.0</Version>
		<PackageReleaseNotes>Enhancements.</PackageReleaseNotes>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<Title>CodeChops.MagicEnums</Title>
		<Description>
Flexible and extendable enums for C#:
* It is possible to use other member values than integral types. For example: 
	- Strings that automatically represent their member name:
		* This prohibits incorrect usage of integral values when they are not needed;
		* It removes the need to keep track of (incremental) integral values;
	- Custom defined types, for example see StrictDirectionModes: https://github.com/Code-Chops/Geometry/;

* Inheritance and/or partial records can be used to extend your enums: 
	- Enums can now be extended in multiple projects;
	- Custom methods can be added to enums, if necessary;

* Enum-members can be auto-discovered. This removes the need to keep track of used/unused enum-members:
	- Explicitly:
		* Is enabled by adding the DiscoverEnumMembers-attribute;
		* Use {Enum}.{Member}.CreateMember(...) to create a source generated enum-member on the fly;
		* A member value (and comment) can be provided;
	- Implicitly:
		* Is enabled by adding the DiscoverEnumMembers-attribute with implicitDiscoverability = true;
		* Use {Enum}.{Member} to create a source generated enum-member on the fly;
			
* Enum members can be added at runtime, if necessary;

* Has the same functionality as the default .NET enum:
	- Members can be found by using their name or value;
	- Multiple members with the same value can even be looked up: This is not supported in default C# enums;

* Optimized, and therefore fast member registration / lookup;
		</Description>
		<PackageId>CodeChops.MagicEnums</PackageId>
		<PackageProjectUrl>https://github.com/code-chops/MagicEnums</PackageProjectUrl>
		<PackageTags>CodeChops;CodeChops.MagicEnums;CodeChops.MagicEnum;MagicEnums;MagicEnum;Magic enums;Magic enum;Smart enums;Smart enum;Better enums;Better enum;</PackageTags>
		<RepositoryUrl>https://github.com/code-chops/MagicEnums</RepositoryUrl>
		<RepositoryType>Git</RepositoryType>
		<PublishRepositoryUrl>true</PublishRepositoryUrl>
		<Authors>CodeChops (@Code-Chops), Max Bergman</Authors>
		<Company>CodeChops</Company>
		<PackageIcon>icon.png</PackageIcon>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<Copyright>Copyright (c) CodeChops $([System.DateTime]::Now.ToString(yyyy))</Copyright>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
		<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
	</PropertyGroup>

	<!-- Creates local nuget packages if in release mode and environment variable LocalNuGetPackagesFolder is configured -->
	<Target Name="AddNugetPackage" AfterTargets="Pack" Condition="'$(Configuration)' == 'Release' AND '$(LocalNuGetPackagesFolder)' != null">
		<Exec Command="$(LocalNuGetPackagesFolder)\nuget.exe add $(OutputPath)..\$(PackageId).$(PackageVersion).nupkg -source $(LocalNuGetPackagesFolder)" />
	</Target>
	
	<ItemGroup Label="PackageAssets">
		<None Include="Properties\LICENSE" Pack="true" PackagePath="" />
		<None Include="Properties\icon.png" Pack="true" Visible="true" PackagePath="" />
	</ItemGroup>

	<ItemGroup Label="InternalsVisibleTo">
		<InternalsVisibleTo Include="$(AssemblyName).UnitTests" />
		<InternalsVisibleTo Include="$(AssemblyName).IntegrationTests" />
	</ItemGroup>
	
	<ItemGroup Label="ProjectReferences">
		<ProjectReference Include="..\MagicEnums.SourceGeneration\MagicEnums.SourceGeneration.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
		<!-- Package the generator in the analyzer directory of the nuget package -->
		<None Include="..\MagicEnums.SourceGeneration/bin/$(Configuration)/netstandard2.0/$(AssemblyName).SourceGeneration.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
		<None Include="..\MagicEnums.SourceGeneration/bin/$(Configuration)/netstandard2.0/CodeChops.SourceGeneration.Utilities.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>

	<ItemGroup Label="PackageReferences">
		<PackageReference Include="CodeChops.DomainDrivenDesign.DomainModeling" Version="0.11.1" />
		<PackageReference Include="CodeChops.GenericMath" Version="1.6.0" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.2.0" />
	</ItemGroup>

</Project>