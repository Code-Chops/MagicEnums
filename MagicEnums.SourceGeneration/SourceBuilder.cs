using System.Text;
using Microsoft.CodeAnalysis;
using System.Collections.Concurrent;
using CodeChops.MagicEnums.SourceGeneration.Entities;

namespace CodeChops.MagicEnums.SourceGeneration;

internal class SourceBuilder
{
	public string CreateEnum(EnumDeclaration declaration, ConcurrentDictionary<string, Entities.Enum> enumDataByNames)
	{
		var code = new StringBuilder();

		enumDataByNames.TryGetValue(declaration.EnumName, out var memberData);

		var members = memberData?.MemberByKeys
			.OrderByDescending(memberByKey => memberByKey.Key.FilePath == declaration.FilePath)
			.ThenBy(memberByKey => memberByKey.Key)
			.Select(memberByKey => memberByKey.Value)
			.GroupBy(member => member.Name)
			.Select(membersByName => membersByName.First())
			.ToArray() ?? Array.Empty<EnumMember>();

		var longestMemberNameLength = members
			.Select(member => member.Name)
			.OrderByDescending(name => name.Length)
			.FirstOrDefault()?.Length ?? 0;

		code.Append(
$@"// <auto-generated />
#nullable enable
using System;
using CodeChops.MagicEnums;
{GetValueTypeUsing()}
{GetNamespaceDeclaration()}
{GetEnumRecord()}
{declaration.AccessModifier}static class {declaration.EnumName}Extensions
{{
	public static {declaration.EnumName} GenerateMember(this {declaration.EnumName} member, {declaration.ValueType.Name}? value = null, string? comment = null) => member;
}}

#nullable restore");

		return code.ToString();


		string? GetValueTypeUsing()
		{
			var ns = declaration.ValueType.ContainingNamespace.ToDisplayString();
			if (ns == "System") return null;

			ns = $"using {ns};";
			return ns;
		}


		string? GetNamespaceDeclaration()
		{
			if (declaration.Namespace is null) return null;

			var code = $@"namespace {declaration.Namespace};";
			return code;
		}


		StringBuilder GetEnumRecord()
		{
			var code = new StringBuilder();

			if (members.Length == 0) return code;

			code.Append($@"
/// <summary>
/// <code>");

			foreach (var member in members)
			{
				var outlineSpaces = new string(' ', longestMemberNameLength - member.Name.Length);

				code.Append($@"
/// -{member.Name}{outlineSpaces} = {(member.Value is null ? "(?)" : member.Value)}");
			}

			code.Append($@"
/// </code>
/// </summary>");

			code.Append($@"
{declaration.AccessModifier}partial record {declaration.EnumName}
{{	
");

			foreach (var member in members)
			{
				if (member.Value is not null)
				{
					code.Append($@"
	/// <summary>
	/// (value: {member.Value})");

					if (member.Comment is not null)
					{
						code.Append($@"
	/// {member.Comment}");
					}
					code.Append($@"
	/// </summary>");
				}

				var outlineSpaces = new string(' ', longestMemberNameLength - member.Name.Length);
				code.Append(@$"
	public static {declaration.EnumName} {member.Name} {{ get; }} {outlineSpaces}= CreateMember({member.Value});
");
			}

			code.Append($@"
}}
");

			return code;
		}
	}
}